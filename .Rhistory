unlink("docs/index_cache", recursive = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("rmarkdown")
rmarkdown::render_site()
touch _site.yml
rmarkdown::render_site()
install.packages('installr')
install.packages('installr')
updateR()
installr::updateR()
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='dschaadt',
token='975BBD964A5DAB59FB95D2995BA278D2',
secret='/6L6A1r77riFPQotSrNP5V3oguFQa6QWT+/bOkon')
rsconnect::deployApp("index.Rmd")
rsconnect::deployDoc("index.Rmd")
rsconnect::deployDoc("~/Documents/dschaadt32.github.io/docs/index.Rmd")
url <-generateUrl("pfjr-vzaw")
generateUrl <- function (datasetID) paste(
socrataUrl,
paste(datasetID, 'json', sep="."),
sep="/"
)
url <-generateUrl("pfjr-vzaw")
socrataUrl <-"https://data.somervillema.gov/resource" ## not sensitive
generateUrl <- function (datasetID) paste(
socrataUrl,
paste(datasetID, 'json', sep="."),
sep="/"
)
url <-generateUrl("pfjr-vzaw")
happinessSurveyData <- RSocrata::read.socrata(url)
View(happinessSurveyData)
socrataUrl <-"https://data.somervillema.gov/resource" ## not sensitive
generateUrl <- function (datasetID) paste(
socrataUrl,
paste(datasetID, 'json', sep="."),
sep="/"
)
datasetID <- ## TODO, find the dataset-id on the Open Data Portal
url <- generateUrl(datasetID)
# Chunk 1: setup
library(learnr)
library(tidyverse)
library(nycflights13)
library(Lahman)
library(RSocrata)
socrataUrl <-"https://data.somervillema.gov/resource" ## not sensitive
generateUrl <- function (datasetID) paste(
socrataUrl,
paste(datasetID, 'json', sep="."),
sep="/"
)
url <-generateUrl("pfjr-vzaw")
happinessSurveyData <- RSocrata::read.socrata(url)
tutorial_options(
exercise.timelimit = 60,
# A checker function that compares the expected and actual results
exercise.checker = function(label, user_code, solution_code, check_code, envir_result, evaluate_result, ...) {
user_result <- eval(parse(text = user_code), envir = envir_result)
correct_result <- eval(parse(text = solution_code), envir = envir_result)
if (nrow(user_result) == nrow(correct_result) && all.equal(user_result, correct_result) == TRUE) {
return(list(correct = TRUE, message = "Great job!"))
} else {
return(list(correct = FALSE, message = "Check your filtering conditions and try again."))
}
}
)
knitr::opts_chunk$set(error = TRUE)
unlink("docs/index_cache", recursive = TRUE)
unlink("docs/index_cache", recursive = TRUE)
socrataUrl <-"https://data.somervillema.gov/resource" ## not sensitive
generateUrl <- function (datasetID) paste(
socrataUrl,
paste(datasetID, 'json', sep="."),
sep="/"
)
unlink("docs/index_cache", recursive = TRUE)
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
unlink("docs/index_cache", recursive = TRUE)
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
unlink("docs/index_cache", recursive = TRUE)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='dschaadt',
token='975BBD964A5DAB59FB95D2995BA278D2',
secret='/6L6A1r77riFPQotSrNP5V3oguFQa6QWT+/bOkon')
rsconnect::deployDoc("~/Documents/dschaadt32.github.io/docs/index.Rmd")
unlink("docs/index_cache", recursive = TRUE)
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
library(rsconnect)
rsconnect::setAccountInfo(name='dschaadt',
token='975BBD964A5DAB59FB95D2995BA278D2',
secret='/6L6A1r77riFPQotSrNP5V3oguFQa6QWT+/bOkon')
rsconnect::deployDoc("~/Documents/dschaadt32.github.io/docs/index.Rmd")
rmarkdown::render_site("index.Rmd")
rmarkdown::render_site("docs/index.Rmd")
rmarkdown::render_site("docs/index.Rmd")
rmarkdown::render_site("docs/index.Rmd")
rmarkdown::run("docs/index.Rmd")
unlink("docs/index_cache", recursive = TRUE)
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
# rmarkdown::render_site("docs/index.Rmd")
rmarkdown::run("docs/index.Rmd")
# rmarkdown::render_site("docs/index.Rmd")
rmarkdown::clean_site("docs/index.Rmd")
# rmarkdown::render_site("docs/index.Rmd")
rmarkdown::clean_site("docs/index.Rmd")
# rmarkdown::render_site("docs/index.Rmd")
rmarkdown::run("docs/index.Rmd")
unlink("docs/index_cache", recursive = TRUE)
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
unlink("docs/index_cache", recursive = TRUE)
rmarkdown::shiny_prerendered_clean("docs/index.Rmd")
# rmarkdown::render_site("docs/index.Rmd")
rmarkdown::run("docs/index.Rmd")
